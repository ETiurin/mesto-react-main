{"ast":null,"code":"import { apiToken, apiUrl, apiCohortId } from \"./constans\";\nclass Api {\n  constructor(apiToken, apiUrl, apiCohortId) {\n    this._apiToken = apiToken;\n    this._apiUrl = apiUrl;\n    this._apiCohortId = apiCohortId;\n    this.changeLikeCardStatus = this.changeLikeCardStatus.bind(this);\n  }\n  _checkRes(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  _getInitialCards() {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards`, {\n      headers: {\n        authorization: this._apiToken\n      }\n    }).then(this._checkRes);\n  }\n  getUserInfo() {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/users/me`, {\n      headers: {\n        authorization: this._apiToken\n      }\n    }).then(this._checkRes);\n  }\n  getServerData() {\n    return Promise.all([this._getInitialCards(), this.getUserInfo()]);\n  }\n  editUserInfo(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    return fetch(`${this._apiUrl}${this._apiCohortId}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._apiToken,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._checkRes);\n  }\n  addNewCard(data) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards`, {\n      method: \"POST\",\n      headers: {\n        authorization: this._apiToken,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkRes);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._apiToken\n      }\n    }).then(this._checkRes);\n  }\n  setLike(cardId) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: {\n        authorization: this._apiToken\n      }\n    }).then(this._checkRes);\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    return isLiked ? this.removeLike(cardId) : this.setLike(cardId);\n  }\n  removeLike(cardId) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._apiToken\n      }\n    }).then(this._checkRes);\n  }\n  setAvatar(data) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._apiToken,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkRes);\n  }\n}\nconst api = new Api(apiToken, apiUrl, apiCohortId);\nexport default api;","map":{"version":3,"names":["apiToken","apiUrl","apiCohortId","Api","constructor","_apiToken","_apiUrl","_apiCohortId","changeLikeCardStatus","bind","_checkRes","res","ok","json","Promise","reject","status","_getInitialCards","fetch","headers","authorization","then","getUserInfo","getServerData","all","editUserInfo","_ref","name","about","method","body","JSON","stringify","addNewCard","data","link","deleteCard","cardId","setLike","isLiked","removeLike","setAvatar","avatar","api"],"sources":["/Users/evgeniitiurin/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["import { apiToken, apiUrl, apiCohortId } from \"./constans\";\n\nclass Api {\n  constructor(apiToken, apiUrl, apiCohortId) {\n    this._apiToken = apiToken;\n    this._apiUrl = apiUrl;\n    this._apiCohortId = apiCohortId;\n\n    this.changeLikeCardStatus = this.changeLikeCardStatus.bind(this);\n  }\n\n  _checkRes(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  _getInitialCards() {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards`, {\n      headers: {\n        authorization: this._apiToken,\n      },\n    }).then(this._checkRes);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/users/me`, {\n      headers: {\n        authorization: this._apiToken,\n      },\n    }).then(this._checkRes);\n  }\n\n  getServerData() {\n    return Promise.all([this._getInitialCards(), this.getUserInfo()]);\n  }\n\n  editUserInfo({ name, about }) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._apiToken,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name,\n        about,\n      }),\n    }).then(this._checkRes);\n  }\n\n  addNewCard(data) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards`, {\n      method: \"POST\",\n      headers: {\n        authorization: this._apiToken,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then(this._checkRes);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._apiToken,\n      },\n    }).then(this._checkRes);\n  }\n\n  setLike(cardId) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: {\n        authorization: this._apiToken,\n      },\n    }).then(this._checkRes);\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return isLiked ? this.removeLike(cardId) : this.setLike(cardId);\n  }\n\n  removeLike(cardId) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._apiToken,\n      },\n    }).then(this._checkRes);\n  }\n\n  setAvatar(data) {\n    return fetch(`${this._apiUrl}${this._apiCohortId}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._apiToken,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        avatar: data.avatar,\n      }),\n    }).then(this._checkRes);\n  }\n}\n\nconst api = new Api(apiToken, apiUrl, apiCohortId);\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}